// <auto-generated />
using System;
using System.Collections.Generic;
using JaPark.Services.Parkings.Infrastructure.Data.WriteDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JaPark.Services.Parkings.Infrastructure.Data.WriteDb.Migrations
{
    [DbContext(typeof(ParkingsDbContext))]
    [Migration("20251020165904_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JaPark.Services.Parkings.Domain.CarParts.Models.Parking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "JaPark.Services.Parkings.Domain.CarParts.Models.Parking.Name#ParkingName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Subscription", "JaPark.Services.Parkings.Domain.CarParts.Models.Parking.Subscription#Subscription", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("MaxAcceptableSection")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxAcceptableSpace")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("JaPark.Services.Parkings.Domain.CarParts.Models.Parking", b =>
                {
                    b.OwnsOne("JaPark.Services.Parkings.Domain.CarParts.ValueObjects.ParkingAddress", "Address", b1 =>
                        {
                            b1.Property<string>("ParkingId")
                                .HasColumnType("text");

                            b1.Property<string>("Map")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ParkingId");

                            b1.ToTable("Parkings");

                            b1.ToJson("Address");

                            b1.WithOwner()
                                .HasForeignKey("ParkingId");
                        });

                    b.OwnsMany("JaPark.Services.Parkings.Domain.CarParts.ValueObjects.ParkingSection", "Sections", b1 =>
                        {
                            b1.Property<string>("ParkingId")
                                .HasColumnType("text");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.HasKey("ParkingId", "__synthesizedOrdinal");

                            b1.ToTable("Parkings");

                            b1.ToJson("Sections");

                            b1.WithOwner()
                                .HasForeignKey("ParkingId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
